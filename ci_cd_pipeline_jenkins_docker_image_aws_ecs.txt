def COLOR_MAP = [
	'SUCCESS': 'good',
	'FAILURE': 'danger'
]
pipeline{
	agent any
	environment{
		registryCredential = 'ecr:us-east-1:awscreds'
		appRegistry = "287931970971.dkr.ecr.us-east-1.amazonaws.com/vprofileappimgtest"
		vprofileRegistry = "https://287931970971.dkr.ecr.us-east-1.amazonaws.com"

		cluster = "vprofile"
		service = "vprofileapptask-service-ow0hih77"
	}
	tools{
		maven "MAVEN3"
		jdk "OracleJDK11"
	}


	stages{

		stage('Fetch Code'){
			steps{
				git branch: 'docker', url: 'https://github.com/devopshydclub/vprofile-project.git'
			}
		}

		stage('Build'){
			steps{
				sh 'mvn install -DskipTests'
			}

			post{
				success{
					echo 'Archiving artifacts now.'
					archiveArtifacts artifacts: '**/*.war'
				}
			}
		}

		stage('UNIT TESTS'){
			steps{
				sh 'mvn test'
			}
		}


		stage('Checkstyle Analysis'){
			steps{
				sh 'mvn checkstyle:checkstyle'
			}
		}

		stage('Sonar Analysis'){
			environment{
			scannerHome = tool 'sonar8.3'
			}
			steps{
				withSonarQubeEnv('sonar'){
					sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
					-Dsonar.projectName=vprofile \
					-Dsonar.projectVersion=1.0 \
					-Dsonar.sources=src/ \
					-Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest \
					-Dsonar.junit.reportsPath=target/surefire-reports/ \
					-Dsonar.jacoco.reportsPath=target/jacoco.exec \
					-Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
					'''
				}
			}
		}



		stage('Quality Gate'){
			steps{
				timeout(time: 1, unit: 'HOURS'){
					waitForQualityGate abortPipeline: true
				}
			}
		}

		stage('Build App Image'){
			steps{
				script{
					dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER","./Docker-files/app/multistage/")
				}
			}
		}

		stage('Upload App Image'){
			steps{
				script{
					docker.withRegistry(vprofileRegistry,registryCredential){
						dockerImage.push("$BUILD_NUMBER")
						dockerImage.push('latest')
					}
				}
			}
		}



		stage('Deploy to ecs'){
			steps{
				withAWS(credentials: 'awscreds',region: 'us-east-1'){
					sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
				}
			}
		}



	





		


		
	}



	post {
    	always {
        	echo 'Slack Notifications.'
        	slackSend(
            	channel: '#jenkinscicd',
            	color: COLOR_MAP[currentBuild.currentResult],
            	message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        	)
    	}
	}



}