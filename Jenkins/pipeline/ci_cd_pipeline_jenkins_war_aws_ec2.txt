def COLOR_MAP = [
	'SUCCESS': 'good',
	'FAILURE': 'danger'
]
pipeline{
	agent any
	tools{
		maven "MAVEN3"
		jdk "OracleJDK11"
	}

	stages{

		stage('Fetch Code'){
			steps{
				git branch: 'main', url: 'https://github.com/hkhcoder/vprofile-project.git'
			}
		}

		stage('Build'){
			steps{
				sh 'mvn install -DskipTests'
			}

			post{
				success{
					echo 'Archiving artifacts now.'
					archiveArtifacts artifacts: '**/*.war'
				}
			}
		}

		stage('UNIT TESTS'){
			steps{
				sh 'mvn test'
			}
		}


		stage('Checkstyle Analysis'){
			steps{
				sh 'mvn checkstyle:checkstyle'
			}
		}

		stage('Sonar Analysis'){
			environment{
			scannerHome = tool 'sonar8.3'
			}
			steps{
				withSonarQubeEnv('sonar'){
					sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
					-Dsonar.projectName=vprofile \
					-Dsonar.projectVersion=1.0 \
					-Dsonar.sources=src/ \
					-Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest \
					-Dsonar.junit.reportsPath=target/surefire-reports/ \
					-Dsonar.jacoco.reportsPath=target/jacoco.exec \
					-Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
					'''
				}
			}
		}



		stage('Quality Gate'){
			steps{
				timeout(time: 1, unit: 'HOURS'){
					waitForQualityGate abortPipeline: true
				}
			}
		}



		stage('UploadArtifact'){
			steps{
				nexusArtifactUploader(
					nexusVersion: 'nexus3',
					protocol: 'http',
					nexusUrl: '172.31.29.251:8081',
					groupId: 'QA',
					version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
					repository: 'vprofile-repo',
					credentialsId: 'nexuslogin',
					artifacts: [
						[
							artifactId: 'vproapp',
							classifier: '',
							file: 'target/vprofile-v2.war',
							type: 'war'
						]
					]
				)
			}
		}






		stage('Deploy WAR to EC2') {
    		steps {
        		sshagent(['vprofile-ssh-key']) {
            		sh '''
                		echo "Deploying to EC2..."

                		ssh -o StrictHostKeyChecking=no ubuntu@34.201.150.204 '
                    	echo "Stopping Tomcat..."
                    	sudo systemctl stop tomcat || sudo /opt/tomcat/bin/shutdown.sh

                    	echo "Cleaning old ROOT deployment..."
                    	sudo rm -rf /opt/tomcat/webapps/ROOT /opt/tomcat/webapps/ROOT.war'

                		echo "Uploading WAR as ROOT.war..."
                		scp -o StrictHostKeyChecking=no target/vprofile-v2.war ubuntu@34.201.150.204:/tmp/ROOT.war

                		ssh -o StrictHostKeyChecking=no ubuntu@34.201.150.204 '
                    	echo "Deploying new WAR..."
                    	sudo mv /tmp/ROOT.war /opt/tomcat/webapps/

                    	echo "Starting Tomcat..."
                    	sudo systemctl start tomcat || sudo /opt/tomcat/bin/startup.sh
                	'
            		'''
       			}		
    		}
		}


		
	}



	post {
    	always {
        	echo 'Slack Notifications.'
        	slackSend(
            	channel: '#jenkinscicd',
            	color: COLOR_MAP[currentBuild.currentResult],
            	message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        	)
    	}
	}



}